<?php
declare( strict_types = 1 );

namespace Wikimedia\Parsoid\Core;

/**
 * Section metadata for generating TOC.
 *
 * For now, this schema matches whatever is generated by Parser.php.
 * Parsoid will attempt to match this output for now.
 *
 * Parser.php::finalizeHeadings() is the authoritative source for how
 * some of these properties are computed right now, especially for the
 * $line, $anchor, and $linkAnchor properties below.
 *
 * Linker.php::tocLine() and ::makeHeadline() demonstrate how these
 * properties are used to create headings and table of contents lines.
 */
class SectionMetaData implements \JsonSerializable {
	/**
	 * The heading tag level: a 1 here means an <H1> tag was used, a
	 * 2 means an <H2> tag was used, etc.
	 */
	public int $hLevel;

	/**
	 * This is a zero-indexed TOC level and the nesting level.
	 * So, if a page has a H2-H4-H6, then, those levels 2,4,6
	 * correspond to TOC-levels 0,1,2.
	 */
	public int $tocLevel;

	/**
	 * HTML heading of the section. Only a narrow set of HTML tags are allowed here.
	 *
	 * This starts with the parsed headline seen in wikitext and
	 * - replaces links with link text
	 * - processes extension strip markers
	 * - removes style, script tags
	 * - strips all HTML tags except the following tags (from Parser.php)
	 *   . <sup> and <sub> (T10393)
	 *   . <i> (T28375)
	 *   . <b> (r105284)
	 *   . <bdi> (T74884)
	 *   . <span dir="rtl"> and <span dir="ltr"> (T37167)
	 *   . <s> and <strike> (T35715)
	 *   . <q> (T251672)
	 *   We strip any parameter from accepted tags, except dir="rtl|ltr" from <span>,
	 *   to allow setting directionality in toc items.
	 */
	public string $line;

	/**
	 * TOC number string (3.1.3, 4.5.2, etc.)
	 */
	public string $number;

	/**
	 * Section id (integer, assigned in depth first traversal order)
	 * Template generated sections get a "T-" prefix.
	 */
	public string $index;

	/**
	 * The title of the page that generated this heading.
	 * For template-generated sections, this will be the template title.
	 */
	public string $fromTitle;

	/**
	 * Byte offset where the section shows up in wikitext; this is null
	 * if this section comes from a template, if it comes from a literal
	 * HTML <h_> tag, or otherwise doesn't correspond to a "preprocessor
	 * section".
	 */
	public ?int $byteOffset;

	/**
	 * Anchor attribute.
	 *
	 * This property is the "true" value of the ID attribute, and should be
	 * used when looking up a heading or setting an attribute, for example
	 * using Document.getElementById() or Element.setAttribute('id',...).
	 *
	 * This value is *not* HTML-entity escaped; if you are writing HTML
	 * as a literal string, you should still entity-escape ampersands and
	 * single/double quotes as appropriate.
	 *
	 * This value is *not* URL-escaped either; instead use the `linkAnchor`
	 * property if you are constructing a URL to target this section.
	 *
	 * The anchor attribute is based on the $line property, but does extra
	 * processing to turn it into a valid attribute:
	 * - strip all HTML tags,
	 * - normalizes section name
	 * - normalizes section name whitespace
	 * - decodes char references
	 * - makes it a valid HTML id attribute value
	 *   (HTML5 / HTML4 based on $wgFragmentMode property)
	 * - dedupes (case-insensitively) identical anchors by adding "_$n" suffixes
	 */
	public string $anchor;

	/**
	 * Anchor URL fragment.
	 *
	 * This is very similar to the $anchor property, but is appropriately
	 * URL-escaped to make it appropriate to use in constructing a URL
	 * fragment link.  You should almost always prepend a `#` symbol
	 * to `linkAnchor` if you are using it correctly.
	 */
	public string $linkAnchor;

	/**
	 * @param array $data Associate array with section metadata
	 */
	public function __construct( array $data ) {
		$this->tocLevel = $data['toclevel'];
		$this->line = $data['line'];
		$this->hLevel = (int)$data['level'];
		$this->number = $data['number'];
		$this->index = $data['index'];
		$this->fromTitle = $data['fromtitle'] ?? '';
		$this->byteOffset = $data['byteoffset'] ?? null;
		$this->anchor = $data['anchor'];
		$this->linkAnchor = $data['linkAnchor'];
	}

	/**
	 * Return as associative array.
	 * This is helpful as b/c support while we transition to objects.
	 * @return array
	 */
	public function toArray(): array {
		return [
			'toclevel' => $this->tocLevel,
			// cast $level to string in order to keep b/c for the parse api
			'level' => (string)$this->hLevel,
			'line' => $this->line,
			'number' => $this->number,
			'index' => $this->index,
			'fromtitle' => $this->fromTitle,
			'byteoffset' => $this->byteOffset,
			'anchor' => $this->anchor,
			'linkAnchor' => $this->linkAnchor,
		];
	}

	/**
	 * @inheritDoc
	 */
	public function jsonSerialize(): array {
		return $this->toArray();
	}
}
